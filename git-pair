#!/usr/bin/env ruby

# Configures the git author to a list of developers when pair programming,
# alphabetized on first name
# 
# Usage: git pair ls gw (Sets the author to 'Greg Woodward & Loren Siebert')
#        git pair       (Unsets the author so the git global config takes effect)
# 
# Orginal Author: Bryan Helmkamp (http://brynary.com)

#######################################################################

require 'yaml'

use_global_gitconfig = nil
unless File.exists?(".git")
  use_global_gitconfig = ' --global '
end

## Configuration

def get_pairs_config
  pairs_file_path = nil
  original_directory_location = Dir.pwd
  until pairs_file_path || Dir.pwd == File.expand_path('/') do
    if File.exists?(".pairs")
      pairs_file_path = File.expand_path(".pairs")
    else
      Dir.chdir ".."
    end
  end
  unless pairs_file_path
    puts <<-INSTRUCTIONS
Could not find a .pairs file. Create a YAML file in your project or home directory.
Format: <initials>: <name>[; <email>]
Example:
# .pairs - configuration for 'git pair'
# place in project or home directory
pairs:
  eh: Edward Hieatt
  js: Josh Susser; jsusser
  sf: Serguei Filimonov; serguei
email:
  prefix: pair
  domain: pivotallabs.com
INSTRUCTIONS
    exit(1)
  end
  pairs_file = pairs_file_path ? YAML.load_file(".pairs") : {}
  Dir.chdir original_directory_location
  pairs_file
end

## End of configuration
#######################################################################

config = get_pairs_config
authors = ARGV.map do |initials|
  if full_name = config['pairs'][initials.downcase]
    full_name
  else
    puts "Couldn't find author name for initials: #{initials}. Add this person to the .pairs file in your project or home directory."
    exit 1
  end
end

if authors.any?
  authors.sort!.uniq!
  names, emails = authors.collect do |a|
    both = a.split(";").collect {|s| s.strip}
    both << both[0].split(' ').first.downcase if both.length == 1  # default email to first name
    both
  end.transpose

  case authors.size
  when 1
    authors = names.first
  when 2
    authors = names.join(" & ")
  else
    authors = names[0..-2].join(", ") + " & " + names.last
  end
  prefix = emails.size > 1 ? [config['email']['prefix']] : []
  email = (prefix + emails).join('+')
  
  if use_global_gitconfig
    puts "Updating the global Git user and e-mail (as specified in ~/.gitconfig)"
  else
    puts "Updating the Git user and e-mail for this particular Git repository only (as specified in ./.git/config)"
  end

  `git config #{use_global_gitconfig} user.name "#{authors}"`
  `git config #{use_global_gitconfig} user.email #{email}@#{config['email']['domain']}`
else
  `git config #{use_global_gitconfig} --unset user.name`
  `git config #{use_global_gitconfig} --unset user.email`
  global_or_local_message = use_global_gitconfig ? 'global' : 'local (i.e., for this repository only)'
  puts "Unset the #{global_or_local_message} Git user.name and user.email"
end
puts `git config -l | grep user | tail -2`
